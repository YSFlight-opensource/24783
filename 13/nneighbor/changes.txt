From dual

() CMakeLists.txt

set(TARGET_NAME mesh_nneighbor)


() VtxNomToYsShell
        shl.SetPolygonColor(plHd,YsBlue());


() YsShellToVtxNom

            auto plCol=shl.GetColor(plHd);


                col.push_back(plCol.Rf());
                col.push_back(plCol.Gf());
                col.push_back(plCol.Bf());
                col.push_back(1);
()
    static std::vector <YsShell::PolygonHandle> GetNNeighbor(const YsShellExt &shl,YsShell::PolygonHandle plHd,int N);



()  In fact, you can combine a hash table and the polygon-distance map.



()
/* static */ std::vector <YsShell::VertexHandle> FsLazyWindowApplication::GetWithinRadius(
       YsShellExt &shl,YsShell::VertexHandle from,const double radius)
{
}



Highlighting high-dihedral angle edge



() Add
    std::vector <float> highDhaEdge;


    enum STATE
    {
        STATE_NORMAL,
        STATE_DUAL,
        STATE_HIGHDHA
    };



()
void FsLazyWindowApplication::MakeHighDha(const double dhaThr)
{
    highDhaEdge.clear();
    for(auto plHd : shl.AllPolygon())
    {
        auto nEdge=shl.GetPolygonNumVertex(plHd);
        auto plVtHd=shl.GetPolygonVertex(plHd);
        auto nom0=shl.GetNormal(plHd);
        for(decltype(nEdge) edIdx=0; edIdx<nEdge; ++edIdx)
        {
            auto neiPlHd=shl.GetNeighborPolygon(plHd,edIdx);
            if(nullptr!=neiPlHd && shl.GetSearchKey(plHd)<shl.GetSearchKey(neiPlHd))
            {
                auto nom1=shl.GetNormal(neiPlHd);
                if(nom0*nom1<cos(dhaThr))
                {
                    YsVec3 edVtPos[2]=
                    {
                        shl.GetVertexPosition(plVtHd[edIdx]),
                        shl.GetVertexPosition(plVtHd.GetCyclic(edIdx+1))
                    };
                    highDhaEdge.push_back(edVtPos[0].xf());
                    highDhaEdge.push_back(edVtPos[0].yf());
                    highDhaEdge.push_back(edVtPos[0].zf());
                    highDhaEdge.push_back(edVtPos[1].xf());
                    highDhaEdge.push_back(edVtPos[1].yf());
                    highDhaEdge.push_back(edVtPos[1].zf());
                }
            }
        }
    }
}



() In Interval
    if(FSKEY_H==key)
    {
        MakeHighDha(YsPi/4.0); // 45 deg
        state=STATE_HIGHDHA;
    }
